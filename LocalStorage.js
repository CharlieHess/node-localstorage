// Generated by CoffeeScript 1.3.3
(function() {
  var LocalStorage, fs, path, _emptyDirectory, _rm;

  path = require('path');

  fs = require('fs');

  _emptyDirectory = function(target) {
    var p, _i, _len, _ref, _results;
    _ref = fs.readdirSync(target);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(_rm(path.join(target, p)));
    }
    return _results;
  };

  _rm = function(target) {
    if (fs.statSync(target).isDirectory()) {
      _emptyDirectory(target);
      return fs.rmdirSync(target);
    } else {
      return fs.unlinkSync(target);
    }
  };

  LocalStorage = (function() {

    function LocalStorage(location, quota) {
      this.location = location;
      this.quota = quota != null ? quota : 5 * 1024 * 1024;
      this.length = 0;
      this.bytesInUse = 0;
      this.keys = [];
      this._init();
    }

    LocalStorage.prototype._init = function() {
      var k, value, _i, _len, _ref, _results;
      if (fs.existsSync(this.location)) {
        if (!fs.statSync(this.location).isDirectory()) {
          throw new Error("A file exists at the location '" + this.location + "' when trying to create/open localStorage");
        }
      }
      if (!fs.existsSync(this.location)) {
        fs.mkdirSync(this.location);
      }
      this.keys = fs.readdirSync(this.location);
      this.length = this.keys.length;
      this.bytesInUse = 0;
      _ref = this.keys;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        value = this.getItem(k);
        if ((value != null ? value.length : void 0) != null) {
          _results.push(this.bytesInUse += value.length);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    LocalStorage.prototype.setItem = function(key, value) {
      var e, existsBeforeSet, filename, oldLength, valueString, valueStringLength;
      key = key.toString();
      filename = path.join(this.location, key);
      existsBeforeSet = fs.existsSync(filename);
      valueString = value.toString();
      valueStringLength = valueString.length;
      if (existsBeforeSet) {
        oldLength = this.getItem(key).length;
      } else {
        oldLength = 0;
      }
      if (this.bytesInUse - oldLength + valueStringLength > this.quota) {
        e = new Error('Quota exceeded.');
        e.name = 'QUOTA_EXCEEDED_ERR';
        throw e;
      }
      fs.writeFileSync(filename, valueString, 'utf8');
      if (!existsBeforeSet) {
        this.keys.push(key);
        this.length = this.keys.length;
        return this.bytesInUse += valueStringLength;
      }
    };

    LocalStorage.prototype.getItem = function(key) {
      var filename;
      key = key.toString();
      filename = path.join(this.location, key);
      if (fs.existsSync(filename)) {
        return fs.readFileSync(filename, 'utf8');
      } else {
        return null;
      }
    };

    LocalStorage.prototype.removeItem = function(key) {
      var filename;
      key = key.toString();
      filename = path.join(this.location, key);
      if (fs.existsSync(filename)) {
        _rm(filename);
      }
      return this._init();
    };

    LocalStorage.prototype.key = function(n) {
      return this.keys[n];
    };

    LocalStorage.prototype.clear = function() {
      _emptyDirectory(this.location);
      this.keys = [];
      this.length = 0;
      return this.bytesInUse = 0;
    };

    LocalStorage.prototype.getBytesInUse = function() {
      return this.bytesInUse;
    };

    LocalStorage.prototype._deleteLocation = function() {
      _rm(this.location);
      this.keys = [];
      this.length = 0;
      return this.bytesInUse = 0;
    };

    return LocalStorage;

  })();

  exports.LocalStorage = LocalStorage;

}).call(this);
